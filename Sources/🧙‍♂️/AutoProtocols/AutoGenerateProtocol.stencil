
//: Do not change this code as it is autogenerated every time you build.
//: You can change the code in `../StencilTemplatesForSourcery/Application/AutoGenerateProtocol
import Foundation
// MARK: - AutoGenerateProtocol
//: From all Types implementing this protocol Sourcery adds:
//: - public/internal variables // private variables are ignored
//: - public/internal methods (skips initializers)
//: - initializers marked with annotation // sourcery:includeInitInProtocol
//: - of the above it does not add it if  // sourcery:skipProtocol
//: ---

{% macro addInitializersIfNeeded type %}
    {% for method in type.methods where method.annotations.includeInitInProtocol %}
    init(
      {% for parameter in method.parameters %}
      {{parameter.name}}: {{parameter.actualTypeName}}{% if not method.parameters.last.name == parameter.name %},{% endif %}
      {% endfor %}
    ) {% if method.throws %} throws{% endif %}
    {% endfor %}
    {% endmacro %}
{% macro addNonPrivateVariables type %}
    {% for variable in type.variables where variable.readAccess != "private" %}
    {%if not variable.annotations.skipProtocol %}{% if variable.isStatic %}static {% endif %}var {{variable.name}}: {{variable.typeName}} { {% if variable.annotations.onlyGet %} get{% else %}{%if variable.isMutable %}get set{% else %}get{% endif %} {% endif %}}{% endif %}
    {% endfor %}

{% endmacro %}

{% macro addNonPrivateFuntions type %}
    {% for method in type.methods where method.accessLevel != "private" and method.isInitializer == 0 %}
    {% if not method.annotations.skipProtocol %}
    {% if method.isStatic %}static {% endif %}{% if method.isClass %}class {% endif %}func {{method.name}}{%if method.throws %} throws {% endif %}{% if method.returnTypeName and method.returnTypeName.name != "Void" %}-> {{ method.returnTypeName.name }}{% endif %}
    {% endif %}
    {% endfor %}
{% endmacro %}

{% macro addSelectedInitializers type %}
{% for method in type.methods where method.annotations.selectedForProtocol and method.isInitializer %}
    {{method.name}}{% if method.throws %} throws {% endif %}
{% endfor %}
{% endmacro %}

{% macro addSelectedVariables type %}
{% for variable in type.variables where variable.annotations.selectedForProtocol %}
    {% if variable.isStatic %}static {% endif %}var {{variable.name}}: {{variable.typeName}} {  {% if variable.annotations.onlyGet %} get {% else %}{%if variable.isMutable %}get set{% else %}get{% endif %} {% endif%}}
{% endfor %}

{% endmacro %}
{% macro addSelectedFuntions type %}
{% for method in type.methods where method.annotations.selectedForProtocol and method.isInitializer == 0 %}
    {% if method.isStatic %}static {% endif %}{% if method.isClass %}class {% endif %}func {{method.name}}{%if method.throws %} throws {% endif %}{% if method.returnTypeName and method.returnTypeName.name != "Void" %}-> {{ method.returnTypeName.name }}{% endif %}
{% endfor %}
{% endmacro %}

{% for type in types.implementing.AutoGenerateProtocol %}
    // sourcery:inline:{{ type.name }}.AutoGenerateProtocol
    {% call addNonPrivateVariables type%}
    {% call addInitializersIfNeeded type %}
    {% call addNonPrivateFuntions type %}
    // sourcery:end
{% endfor %}
{% for type in types.implementing.AutoGenerateSelectiveProtocol %}
    // sourcery:inline:{{ type.name }}.AutoGenerateSelectiveProtocol
    {% call addSelectedVariables type%}
    {% call addSelectedInitializers type %}
    {% call addSelectedFuntions type %}
    // sourcery:end
{% endfor %}
